name: Build and deploy to AltStore
on:
  workflow_dispatch:
  push:
    branches:
    - "feature-*"
permissions:
  contents: write


env:
  # MUST CHANGE:
  APP_NAME: 'CVCalendar Demo'
    # If you change the App name to one that is not the name of your project be shure to adjust XCODE_NAME

  # MAY CHANGE
 # ADD_ENTITLEMENTS: ${{ false }}
  PRODUCTION_RELEASE: false # Release as latest or pre-release
  REVIEW_BEFORE_RELEASE: true # REVIEW_BEFORE_RELEASE: ${{ true }} if: always()
  CHANGELOG_FILE: CHANGELOG.md # set to false (CHANGELOG_FILE: false) to disable CHANGELOG.md maintanance 

  ## Environment
  XCODE_VERSION: '14.2'
  #Build
  XCODE_BUILD_SDK: iphoneos

  # SHOULDNT CHANGE
 
  # For more configuration options see CONFIGURATION step


jobs:
  build-and-deploy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - MACOSX_VERSION: 'macos-13'
          
    runs-on:  ${{ matrix.MACOSX_VERSION }}
    steps:
    - name: CONFIGURATION
      run: |
        APP_NAME_BUNDLE_ID="${APP_NAME// /}"
        # SHOULD CHANGE
        echo "ORG_IDENTIFIER=org.${APP_NAME_BUNDLE_ID}" >> $GITHUB_ENV
        echo "BUNDLE_IDENTIFIER=org.${APP_NAME_BUNDLE_ID}.${{ env.XCODE_BUILD_SDK }}.${APP_NAME_BUNDLE_ID}" >> $GITHUB_ENV

        # MAY CHANGE
        RELEASE_VERSION=${GITHUB_REF#refs/*/}; 
        echo "MARKETING_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
        ## Build
        XCODE_NAME="${{ env.APP_NAME }}"

        
        # SHOULDNT CHANGE
        BUILD_FOLDER="./build"
        XCODE_BUILD_ARCHIVE_PATH="${BUILD_FOLDER}/${{ env.APP_NAME }}.xcarchive"
        echo "XCODE_BUILD_SCHME=${XCODE_NAME}" >> $GITHUB_ENV
        echo "ENTITLEMENTS_FILE=${XCODE_NAME}/${XCODE_NAME// /_}.entitlements" >> $GITHUB_ENV
        RESULT_APP_FOLDER="${XCODE_BUILD_ARCHIVE_PATH}/Products/Applications/${{ env.APP_NAME }}.app"
        echo "RESULT_MACHO_BIN=${RESULT_APP_FOLDER}/${{ env.APP_NAME }}" >> $GITHUB_ENV

        # DONT CHANGE (Exports ENV set above fot future steps)
        echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
        echo "XCODE_NAME=${XCODE_NAME}" >> $GITHUB_ENV
        echo "XCODE_BUILD_ARCHIVE_PATH=${XCODE_BUILD_ARCHIVE_PATH}" >> $GITHUB_ENV
        echo "BUILD_FOLDER=${BUILD_FOLDER}" >> $GITHUB_ENV
        echo "RESULT_APP_FOLDER=${RESULT_APP_FOLDER}" >> $GITHUB_ENV

    - name: Test Version name is correct
      run: |
        echo "testing env"
        echo $RELEASE_VERSION
        echo "testing gitlab expansion"
        echo ${{ env.RELEASE_VERSION }}

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: '${{ env.XCODE_VERSION }}'

    - name: Cache DerivedData
      uses: irgaly/xcode-cache@v1
      with:
        key: xcode-cache-deriveddata-${{ github.workflow }}-${{ github.sha }}
        restore-keys: xcode-cache-deriveddata-${{ github.workflow }}-


    - name: pretend xcscheme
      run: |
        SYSTEM_USER=$(whoami)
        echo "The system username of the runner is: $SYSTEM_USER"
        mv  CVCalendar\ Demo.xcodeproj/xcuserdata/x.xcuserdatad  CVCalendar\ Demo.xcodeproj/xcuserdata/"$SYSTEM_USER".xcuserdatad
        ls  CVCalendar\ Demo.xcodeproj/xcuserdata/
  #  - name: Build the App
  #    run: |
  #      xcodebuild MARKETING_VERSION=3 PRODUCT_BUNDLE_IDENTIFIER=test.ib PRODUCT_NAME="THX TaKa" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO  AD_HOC_CODE_SIGNING_ALLOWED=YES -scheme "CVCalendar Demo" -sdk iphoneos  -archivePath ./build/"THX TaKa" archive
    - name: Build the App
      run: |
        xcodebuild \
        archive \
        -scheme "${{ env.XCODE_BUILD_SCHME }}" \
        -sdk "${{ env.XCODE_BUILD_SDK }}" \
        -archivePath "${{ env.XCODE_BUILD_ARCHIVE_PATH }}"  \
        ORG_IDENTIFIER="${{ env.ORG_IDENTIFIER }}" \
        PRODUCT_NAME="${{ env.APP_NAME }}" \
        PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_IDENTIFIER }}" \
        CURRENT_PROJECT_VERSION="${{ env.RELEASE_VERSION }}" \
        MARKETING_VERSION="${{ env.RELEASE_VERSION }}" \
        CODE_SIGNING_REQUIRED=NO \
        CODE_SIGNING_ALLOWED=NO \
        CODE_SIGN_IDENTITY="" \
        AD_HOC_CODE_SIGNING_ALLOWED=YES \
        | xcpretty && exit ${PIPESTATUS[0]}
    
    - name: Add entitlements to signature
      # if: ${{ env.ADD_ENTITLEMENTS }}
      continue-on-error: true
      run: |
        brew install ldid 
        echo 'running ldid with: "-S${{ env.ENTITLEMENTS_FILE }}"  "${{ env.RESULT_MACHO_BIN }}"'
        if [ ldid "-S${{ env.ENTITLEMENTS_FILE }}"  "${{ env.RESULT_MACHO_BIN }}" ]
        then
          echo "worked"
        else
          echo "WARNING ${{ env.ENTITLEMENTS_FILE }} or ${{ env.RESULT_MACHO_BIN }} couldnt be found failed to add signature"
          echo "check  ${{ env.ENTITLEMENTS_FILE }}"; ls  "${{ env.ENTITLEMENTS_FILE }}" || true
          echo "check  ${{ env.RESULT_MACHO_BIN }}"; ls "${{ env.RESULT_MACHO_BIN }}" || true
          false
        fi

    - name: Convert to IPA    
      run: |
        mkdir "${{ env.BUILD_FOLDER }}/Payload"
        cp -pR "${{ env.RESULT_APP_FOLDER }}" "${{ env.BUILD_FOLDER }}/Payload/"
        IPA_PATH="${{ env.BUILD_FOLDER }}/${env.APP_NAME// /-}.ipa"
        echo "IPA_PATH=${IPA_PATH}" >> $GITHUB_ENV
        cd ${{ env.BUILD_FOLDER }}
        zip -r "${IPA_PATH}" "Payload"


    - name: Build Changelog on PRs 
      uses: mikepenz/release-changelog-builder-action@v5
      id: build_changelog_on_prs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Changelog on commits 
      uses: mikepenz/release-changelog-builder-action@v5
      id: build_changelog_on_commits
      with:
        commitMode: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get current date
      id: date
      run: echo "date=$(date -u +'%Y-%m-%d %c')" >> $GITHUB_OUTPUT    

    - name: Compile Changelog-Prependix and full link
      id: date
      run: | 
        CHANGELOG_PREPEND=ARGUMENTS=$(cat <<EOFXXXXXXXXXXXX
        ## Changelog based on PRs 
        ${{ steps.build_changelog_on_prs.outputs.changelog }}

        ## Changelog based on Commits
        ${{ steps.build_changelog_on_commits.outputs.changelog }}
        EOFXXXXXXXXXXXX
        )
        echo "your Changelog-Prependix is ${CHANGELOG_PREPEND}
        echo "CHANGELOG_PREPEND=${CHANGELOG_PREPEND}" >> $GITHUB_ENV

        FULL_CHANGELOG_LINK=$(cat <<EOFXXXXXXXXXXXX
        ${{ github.server_url }}/${{ github.repository }}/compare/${{ steps.build_changelog_on_prs.outputs.fromTag }}...${{ env.RELEASE_VERSION }}
        EOFXXXXXXXXXXXX
        )
        echo "your full link is ${FULL_CHANGELOG_LINK}
        echo "FULL_CHANGELOG_LINK=${FULL_CHANGELOG_LINK}" >> $GITHUB_ENV
    
    - name: Compile Release Notes
      id: date
      run: | 
        RELEASE_NOTES=ARGUMENTS=$(cat <<EOFXXXXXXXXXXXX
        ${CHANGELOG_PREPEND}

        ## Build Info
        
        Built at (UTC): `${{ steps.date.outputs.date }}`
        Commit SHA: `${{ github.sha }}`
        Version: `${{ env.RELEASE_VERSION }}`
        Github action run:  `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
        SHA256 hash: `${{ hashFiles(env.IPA_PATH) }}`
        **Full Changelog**: ${FULL_CHANGELOG_LINK}
        EOFXXXXXXXXXXXX
        )

        echo "your Release notes are ${RELEASE_NOTES}
        echo "RELEASE_NOTES=${RELEASE_NOTES}" >> $GITHUB_ENV


    - name: Upload to new stable release and create draft
      uses: softprops/action-gh-release@v2
      id: upload_and_draft
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: ${{ env.RELEASE_VERSION }}
        tag_name: ${{ env.RELEASE_VERSION }}
        draft: true
        make_latest: ${{ env.PRODUCTION_RELEASE == 'true' }}
        prerelease: ${{ env.PRODUCTION_RELEASE != 'true' }}
        files: ${{ env.IPA_PATH }}
        body: |
          ${{ env.RELEASE_NOTES }}

    - name: Compile new Changelog file 
      if: ${{ env.CHANGELOG_FILE != 'false' }}
      run: |
        # Compile the Text that will be prepended
        CHANGELOG_PREPEND="${CHANGELOG_PREPEND}\n${FULL_CHANGELOG_LINK}"
        # Prepend it 
        NEW_CHANGELOG_FILE="${CHANGELOG_PREPEND}\n$(cat $CHANGELOG_FILE)"
        # Compile text that will be inserted in the  Full Changelog Section
        CHANGELOG_INSERT="${FULL_CHANGELOG_LINK//${RELEASE_VERSION}/HEAD}\n[${RELEASE_VERSION}]: ${FULL_CHANGELOG_LINK}"
        # Insert it 
        NEW_CHANGELOG_FILE=$(echo "$NEW_CHANGELOG_FILE" | awk -v new_line="$CHANGELOG_INSERT" '
          BEGIN { FS=OFS="\n" }
          /## Full Changelog diffs list/ {
            print
            getline
            sub(/\[unreleased\]:.*/, "[unreleased]: " new_line)
          }
          { print }
        ')
        echo "NEW_CHANGELOG_FILE=${NEW_CHANGELOG_FILE}" >> $GITHUB_ENV
    
    - name: upload new Changelog File to linkode
      if: ${{ env.REVIEW_BEFORE_RELEASE == 'true' && env.CHANGELOG_FILE != 'false' }}
      run: |
        LINKODE_ID=$(curl -X POST \
                        -H "Content-Type: application/x-www-form-urlencoded" \
                        -d "content=${NEW_CHANGELOG_FILE}&text_type=python" \
                        https://linkode.org/api/1/linkodes/ \
                        | jq --raw-output '.linkode_id') 

        echo "LINKODE_ID=${LINKODE_ID}" >> $GITHUB_ENV 
        LINKNODE_URL="https://linkode.org/#${LINKODE_ID}"
        echo "LINKNODE_URL=${LINKNODE_URL}" >> $GITHUB_ENV 




    - uses: powerdot/telegram-manual-approval@main
      timeout-minutes: 480
      if: ${{ env.REVIEW_BEFORE_RELEASE == 'true' }}
      with:
        TELEGRAM_KEY: ${{ secrets.TG_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        UPDATE_REQUESTS: 28800
        APPROVAL_TEXT: |
          ready for release checkout the 
          Release draft at: ${{ steps.upload_and_draft.outputs.url }} 

          new Changelog at:  ${{ env.LINKNODE_URL }}'

          diff under: ${{ env.FULL_CHANGELOG_LINK }}

          Hit Approve to publish those changes
          Except for the diff you may change those files online ans hit save on the corrosponding site to make changes

    - name: Download  Changelog File from linkode
      if: ${{ env.REVIEW_BEFORE_RELEASE == 'true' && env.CHANGELOG_FILE != 'false' }}
      run: |
        CURRENT_LINKODE_ID=$(curl -X GET \
                                  -H 'accept: application/json' \
                                  https://linkode.org/api/1/linkodes/${LINKODE_ID} \
                                  | jq --raw-output -r '
                                    .tree.contents
                                    | map(.. | objects | select(has("order")))
                                    | max_by(.order)
                                    | .linkode_id
                                  ')

        NEW_CHANGELOG_FILE$(curl  -X GET \
                                  -H 'accept: application/json' \
                                  https://linkode.org/api/1/linkodes/cuk7ahCKdXqWURS2KwiAI1 \
                                  | jq --raw-output '.content')

        echo "NEW_CHANGELOG_FILE=${NEW_CHANGELOG_FILE}" >> $GITHUB_ENV

    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.upload_and_draft.outputs.id }}
    
    - name: Update Changelog
      if: ${{ env.CHANGELOG_FILE != 'false' }}
      run: |
        git pull
        echo "${NEW_CHANGELOG_FILE}" >> "${CHANGELOG_FILE}"
        git add "${CHANGELOG_FILE}" 
        git commit -m "updated ${CHANGELOG_FILE}" 
        git push







    


 #   - uses: khasanovbi/telegram-manual-approval@v0.0.2
 #     id: manual_approval
 #     if: ${{ env.REVIEW_BEFORE_RELEASE == 'true' }}
 #     with:
 #       telegram-key: ${{ secrets.TG_BOT_TOKEN }}
 #       telegram-chat-id: ${{ secrets.TG_CHAT_ID }}
 #       approval-text: 'ready for release, checkout the draft at: ${{ steps.upload_and_draft.outputs.url }} and the diff under: ${{ github.server_url }}/${{ github.repository }}/compare/${{ steps.build_changelog_on_prs.outputs.fromTag }}...${{ env.RELEASE_VERSION }}'

#   - uses: khasanovbi/telegram-manual-approval@v0.0.2
#     id: manual_approval_testig
#     if: ${{ env.REVIEW_BEFORE_RELEASE == 'true' }}
#
#     with:
#       telegram-key: ${{ secrets.TG_BOT_TOKEN }}
#       telegram-chat-id: ${{ secrets.TG_CHAT_ID }}
#       approval-text: 'HI'
#
#   - name: Wait for Release Review
#     if: ${{ env.REVIEW_BEFORE_RELEASE }}
#     environment: 'Review Release'
#     run: |
#       echo "ready for release, checkout the draft at: ${{ steps.upload_and_draft.outputs.url }} and the diff under: ${{ github.server_url }}/${{ github.repository }}/compare/${{ steps.build_changelog_on_prs.outputs.fromTag }}...${{ env.RELEASE_VERSION }} 
#


#    - name: The demo step has failed
 #     if: ${{ failure() && steps.manual_approval.conclusion == 'failure' }}


#        xcodebuild \
#  
#        -scheme "CVCalendar Demo" \
#        -sdk "iphoneos" \
#        -archivePath "${{ env.XCODE_BUILD_ARCHIVE_PATH }}"  \
#        ORG_IDENTIFIER="${{ env.ORG_IDENTIFIER }}" \
#        PRODUCT_NAME="${{ env.APP_NAME }}" \
#        PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_IDENTIFIER }}" \
#        CURRENT_PROJECT_VERSION="${{ env.RELEASE_VERSION }}" \
#        MARKETING_VERSION="${{ env.RELEASE_VERSION }}" 
#        CODE_SIGNING_REQUIRED=NO \
#        CODE_SIGNING_ALLOWED=NO \
#        CODE_SIGN_IDENTITY="" \
#        AD_HOC_CODE_SIGNING_ALLOWED=YES \
#        archive \
#        | xcpretty && exit ${PIPESTATUS[0]}
#
#
#xcodebuild archive -scheme "CVCalendar Demo" -sdk iphoneos -archivePath "./build/CVCalendar Demo" ORG_IDENTIFIER=org.CVCalendarDemo "PRODUCT_NAME=CVCalendar Demo" PRODUCT_BUNDLE_IDENTIFIER=org.CVCalendarDemo.iphoneos.CVCalendarDemo CURRENT_PROJECT_VERSION=1.0.4 MARKETING_VERSION=1.0.4